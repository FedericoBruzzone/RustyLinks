// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: {closure@src/main.rs:9:18: 9:20};
    let _2: ();
    let mut _3: &{closure@src/main.rs:9:18: 9:20};
    scope 1 {
        debug lambda => const ZeroSized: {closure@src/main.rs:9:18: 9:20};
    }

    bb0: {
        _3 = &_1;
        _2 = <{closure@src/main.rs:9:18: 9:20} as std::ops::Fn<()>>::call(move _3, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &{closure@src/main.rs:9:18: 9:20}) -> () {
    let mut _0: ();
    let _2: T;
    let _3: ();
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = T { _value: const 10_i32 };
        _3 = test_own(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:5 ~ find_local_var[a99e]::main)"]
    1 [ label="i1: DefId(0:6 ~ find_local_var[a99e]::main::{closure#0})"]
    2 [ label="i2: DefId(0:7 ~ find_local_var[a99e]::test_own)"]
    0 -> 1 [ label="-0.00"]
    1 -> 2 [ label="1.00"]
}

