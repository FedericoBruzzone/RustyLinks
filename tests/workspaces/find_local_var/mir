// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:3:10: 3:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let mut _3: &i32;
    let _4: &i32;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: i32);
        _3 = &(*_4);
        _2 = <i32 as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _0 = T { value: move _2 };
        StorageDead(_2);
        StorageDead(_4);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: T;
    let _2: ();
    let mut _3: T;
    let mut _4: &T;
    let _6: fn(T) {test_own};
    let _7: ();
    let mut _8: fn(T) {test_own};
    let mut _9: T;
    let _11: ();
    let mut _12: fn(T) {test_own};
    let mut _13: T;
    scope 1 {
        debug x => _1;
        let _5: &fn(T) {test_own};
        let mut _14: &fn(T) {test_own};
        scope 2 {
            debug y => _5;
            let _10: fn(T) {test_own};
            scope 3 {
                debug z => _10;
            }
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = T { value: const 10_i32 };
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_1;
        _3 = <T as std::clone::Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        _2 = test_own(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_3);
        StorageDead(_2);
        StorageLive(_5);
        _14 = const main::promoted[0];
        _5 = &(*_14);
        StorageLive(_7);
        StorageLive(_8);
        _8 = copy (*_5);
        StorageLive(_9);
        _9 = move _1;
        _7 = move _8(move _9) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_9);
        StorageDead(_8);
        StorageDead(_7);
        StorageLive(_10);
        _10 = test_own;
        StorageLive(_11);
        StorageLive(_12);
        _12 = copy _10;
        StorageLive(_13);
        _13 = move _1;
        _11 = move _12(move _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_13);
        StorageDead(_12);
        StorageDead(_11);
        _0 = const ();
        StorageDead(_10);
        StorageDead(_5);
        StorageDead(_1);
        return;
    }
}

const main::promoted[0]: &fn(T) {test_own} = {
    let mut _0: &fn(T) {test_own};
    let mut _1: fn(T) {test_own};

    bb0: {
        _1 = test_own;
        _0 = &_1;
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:8 ~ find_local_var[010e]::{impl#0}::clone)"]
    1 [ label="i1: DefId(2:2932 ~ core[fc4c]::clone::Clone::clone)"]
    2 [ label="i2: DefId(0:3 ~ find_local_var[010e]::main)"]
    3 [ label="i3: DefId(0:4 ~ find_local_var[010e]::test_own)"]
    0 -> 1 [ label="1.00"]
    2 -> 1 [ label="1.00"]
    2 -> 3 [ label="1.00"]
    2 -> 3 [ label="1.00"]
    2 -> 3 [ label="1.00"]
}

