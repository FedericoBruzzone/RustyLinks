// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:3:10: 3:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = copy (*_3);
        _0 = T { _value: move _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: T;
    let _2: ();
    let mut _3: T;
    let mut _4: &T;
    let _6: ();
    let mut _7: T;
    let mut _8: &T;
    let _9: ();
    let mut _10: T;
    let mut _11: &T;
    let _13: ();
    let mut _14: T;
    let mut _15: &T;
    let _16: ();
    let mut _17: &{closure@src/main.rs:18:18: 18:31};
    let mut _18: (T, T);
    let mut _19: T;
    let mut _20: &T;
    scope 1 {
        debug x => _1;
        let _5: &fn(T) {test_own};
        scope 2 {
            debug y => _5;
            scope 3 {
                debug z => test_own;
                let _12: {closure@src/main.rs:18:18: 18:31};
                scope 4 {
                    debug lambda => const ZeroSized: {closure@src/main.rs:18:18: 18:31};
                }
            }
        }
    }

    bb0: {
        _1 = T { _value: const 10_i32 };
        _4 = &_1;
        _3 = <T as std::clone::Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_own(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = const main::promoted[0];
        _8 = &_1;
        _7 = <T as std::clone::Clone>::clone(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = test_own(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = &_1;
        _10 = <T as std::clone::Clone>::clone(move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = test_own(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = &_1;
        _14 = <T as std::clone::Clone>::clone(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        _13 = test_own(move _14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = &_12;
        _20 = &_1;
        _19 = <T as std::clone::Clone>::clone(move _20) -> [return: bb9, unwind continue];
    }

    bb9: {
        _18 = (move _19, move _1);
        _16 = <{closure@src/main.rs:18:18: 18:31} as std::ops::Fn<(T, T)>>::call(move _17, move _18) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

const main::promoted[0]: &fn(T) {test_own} = {
    let mut _0: &fn(T) {test_own};
    let mut _1: fn(T) {test_own};

    bb0: {
        _1 = test_own;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &{closure@src/main.rs:18:18: 18:31}, _2: T, _3: T) -> () {
    debug t => _2;
    debug t2 => _3;
    let mut _0: ();
    let _4: T;
    let _5: ();
    scope 1 {
        debug x => _4;
    }

    bb0: {
        _4 = T { _value: const 10_i32 };
        _5 = test_own(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:9 ~ find_local_var[a99e]::{impl#0}::clone)"]
    1 [ label="i1: DefId(0:3 ~ find_local_var[a99e]::main)"]
    2 [ label="i2: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    3 [ label="i3: DefId(0:5 ~ find_local_var[a99e]::test_own)"]
    4 [ label="i4: DefId(0:4 ~ find_local_var[a99e]::main::{closure#0})"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 4 [ label="2.00"]
    4 -> 3 [ label="1.00"]
}

