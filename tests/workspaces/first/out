// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:29:10: 29:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let mut _3: &i32;
    let _4: &i32;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: i32);
        _3 = &(*_4);
        _2 = <i32 as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _0 = T { value: move _2 };
        StorageDead(_2);
        StorageDead(_4);
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    let mut _2: T;
    scope 1 {
        debug t => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = move _1;
        (_2.0: i32) = const 0_i32;
        _0 = const ();
        StorageDead(_2);
        return;
    }
}

fn test_bor(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_mut_bor(_1: &mut T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: T;
    let _3: ();
    let mut _4: T;
    let mut _5: &T;
    let _6: ();
    let mut _7: &T;
    let _8: &T;
    let _9: ();
    let mut _10: &mut T;
    let mut _11: &mut T;
    let _12: ();
    let mut _13: T;
    scope 1 {
        debug t1 => _1;
        let mut _2: T;
        scope 2 {
            debug t2 => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = T { value: const 10_i32 };
        StorageLive(_2);
        _2 = T { value: const 10_i32 };
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        _5 = &_1;
        _4 = <T as std::clone::Clone>::clone(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        _3 = test_own(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        StorageLive(_8);
        _8 = &_1;
        _7 = &(*_8);
        _6 = test_bor(move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_7);
        StorageDead(_8);
        StorageDead(_6);
        StorageLive(_9);
        StorageLive(_10);
        StorageLive(_11);
        _11 = &mut _2;
        _10 = &mut (*_11);
        _9 = test_mut_bor(move _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_10);
        StorageDead(_11);
        StorageDead(_9);
        StorageLive(_12);
        StorageLive(_13);
        _13 = move _1;
        _12 = test_own(move _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        StorageDead(_13);
        StorageDead(_12);
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}
