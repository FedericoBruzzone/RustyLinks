// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:9:10: 9:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = copy (*_3);
        _0 = T { _value: move _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: T;
    let _2: ();
    let mut _3: T;
    let mut _4: &T;
    let _6: ();
    let mut _7: T;
    let mut _8: &T;
    let _9: ();
    let mut _10: T;
    let mut _11: &T;
    let _13: ();
    let mut _14: &{closure@src/main.rs:24:18: 24:31};
    let mut _15: (T, T);
    let mut _16: T;
    let mut _17: &T;
    let mut _18: T;
    let mut _19: &T;
    let _21: ();
    let mut _22: &{closure@src/main.rs:30:18: 30:25};
    let mut _23: (&T,);
    let _24: &T;
    let _25: T;
    let mut _26: &T;
    let _28: ();
    let mut _29: &{closure@src/main.rs:36:18: 36:44};
    let mut _30: (&dyn std::ops::Fn(T) -> T,);
    let mut _31: &dyn std::ops::Fn(T) -> T;
    let _32: &{closure@src/main.rs:40:13: 40:16};
    let _33: {closure@src/main.rs:40:13: 40:16};
    let mut _34: &T;
    let _36: ();
    let mut _37: &{closure@src/main.rs:42:18: 42:56};
    let mut _38: (std::boxed::Box<dyn std::ops::Fn() -> T>,);
    let mut _39: std::boxed::Box<dyn std::ops::Fn() -> T>;
    let mut _40: std::boxed::Box<{closure@src/main.rs:46:33: 46:35}>;
    let mut _41: {closure@src/main.rs:46:33: 46:35};
    let mut _42: &T;
    let _44: ();
    let mut _45: &{closure@src/main.rs:48:18: 48:43};
    let mut _46: (&dyn std::ops::Fn() -> T,);
    let mut _47: &dyn std::ops::Fn() -> T;
    let _48: &{closure@src/main.rs:51:13: 51:15};
    scope 1 {
        debug x => _1;
        let _5: &fn(T) {test_own};
        scope 2 {
            debug y => _5;
            scope 3 {
                debug z => test_own;
                let _12: {closure@src/main.rs:24:18: 24:31};
                scope 4 {
                    debug lambda => const ZeroSized: {closure@src/main.rs:24:18: 24:31};
                    let _20: {closure@src/main.rs:30:18: 30:25};
                    scope 5 {
                        debug lambda => const ZeroSized: {closure@src/main.rs:30:18: 30:25};
                        let _27: {closure@src/main.rs:36:18: 36:44};
                        scope 6 {
                            debug lambda => const ZeroSized: {closure@src/main.rs:36:18: 36:44};
                            let _35: {closure@src/main.rs:42:18: 42:56};
                            scope 7 {
                                debug lambda => const ZeroSized: {closure@src/main.rs:42:18: 42:56};
                                let _43: {closure@src/main.rs:48:18: 48:43};
                                scope 8 {
                                    debug lambda => const ZeroSized: {closure@src/main.rs:48:18: 48:43};
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = T { _value: const 10_i32 };
        _4 = &_1;
        _3 = <T as std::clone::Clone>::clone(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_own(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = const main::promoted[1];
        _8 = &_1;
        _7 = <T as std::clone::Clone>::clone(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = test_own(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = &_1;
        _10 = <T as std::clone::Clone>::clone(move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = test_own(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = &_12;
        _17 = &_1;
        _16 = <T as std::clone::Clone>::clone(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        _19 = &_1;
        _18 = <T as std::clone::Clone>::clone(move _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = (move _16, move _18);
        _13 = <{closure@src/main.rs:24:18: 24:31} as std::ops::Fn<(T, T)>>::call(move _14, move _15) -> [return: bb9, unwind continue];
    }

    bb9: {
        _22 = &_20;
        _26 = &_1;
        _25 = <T as std::clone::Clone>::clone(move _26) -> [return: bb10, unwind continue];
    }

    bb10: {
        _24 = &_25;
        _23 = (copy _24,);
        _21 = <{closure@src/main.rs:30:18: 30:25} as std::ops::Fn<(&T,)>>::call(move _22, move _23) -> [return: bb11, unwind continue];
    }

    bb11: {
        _29 = &_27;
        _34 = &_1;
        _33 = {closure@src/main.rs:40:13: 40:16} { x: move _34 };
        _32 = &_33;
        _31 = copy _32 as &dyn std::ops::Fn(T) -> T (PointerCoercion(Unsize, Implicit));
        _30 = (move _31,);
        _28 = <{closure@src/main.rs:36:18: 36:44} as std::ops::Fn<(&dyn std::ops::Fn(T) -> T,)>>::call(move _29, move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        _37 = &_35;
        _42 = &_1;
        _41 = {closure@src/main.rs:46:33: 46:35} { x: move _42 };
        _40 = std::boxed::Box::<{closure@src/main.rs:46:33: 46:35}>::new(move _41) -> [return: bb13, unwind continue];
    }

    bb13: {
        _39 = move _40 as std::boxed::Box<dyn std::ops::Fn() -> T> (PointerCoercion(Unsize, Implicit));
        _38 = (move _39,);
        _36 = <{closure@src/main.rs:42:18: 42:56} as std::ops::Fn<(std::boxed::Box<dyn std::ops::Fn() -> T>,)>>::call(move _37, move _38) -> [return: bb14, unwind continue];
    }

    bb14: {
        _45 = &_43;
        _48 = const main::promoted[0];
        _47 = copy _48 as &dyn std::ops::Fn() -> T (PointerCoercion(Unsize, Implicit));
        _46 = (move _47,);
        _44 = <{closure@src/main.rs:48:18: 48:43} as std::ops::Fn<(&dyn std::ops::Fn() -> T,)>>::call(move _45, move _46) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }
}

const main::promoted[0]: &{closure@src/main.rs:51:13: 51:15} = {
    let mut _0: &{closure@src/main.rs:51:13: 51:15};
    let mut _1: {closure@src/main.rs:51:13: 51:15};

    bb0: {
        _1 = {closure@src/main.rs:51:13: 51:15};
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &fn(T) {test_own} = {
    let mut _0: &fn(T) {test_own};
    let mut _1: fn(T) {test_own};

    bb0: {
        _1 = test_own;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &{closure@src/main.rs:24:18: 24:31}, _2: T, _3: T) -> () {
    debug t => _2;
    debug t2 => _3;
    let mut _0: ();
    let _4: T;
    let _5: ();
    scope 1 {
        debug x => _4;
    }

    bb0: {
        _4 = T { _value: const 10_i32 };
        _5 = test_own(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#1}(_1: &{closure@src/main.rs:30:18: 30:25}, _2: &T) -> () {
    debug t => _2;
    let mut _0: ();
    let _3: T;
    let _4: ();
    scope 1 {
        debug x => _3;
    }

    bb0: {
        _3 = T { _value: const 10_i32 };
        _4 = test_own(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#2}(_1: &{closure@src/main.rs:36:18: 36:44}, _2: &dyn std::ops::Fn(T) -> T) -> () {
    debug llambda => _2;
    let mut _0: ();
    let _3: T;
    let _4: ();
    scope 1 {
        debug x => _3;
    }

    bb0: {
        _3 = T { _value: const 10_i32 };
        _4 = test_own(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#3}(_1: &{closure@src/main.rs:40:13: 40:16}, _2: T) -> T {
    debug x => (*((*_1).0: &T));
    let mut _0: T;
    let mut _3: &T;

    bb0: {
        _3 = deref_copy ((*_1).0: &T);
        _0 = <T as std::clone::Clone>::clone(copy _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#4}(_1: &{closure@src/main.rs:42:18: 42:56}, _2: std::boxed::Box<dyn std::ops::Fn() -> T>) -> () {
    debug bbox => _2;
    let mut _0: ();
    let _3: T;
    let _4: ();
    scope 1 {
        debug x => _3;
    }

    bb0: {
        _3 = T { _value: const 10_i32 };
        _4 = test_own(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main::{closure#5}(_1: &{closure@src/main.rs:46:33: 46:35}) -> T {
    debug x => (*((*_1).0: &T));
    let mut _0: T;
    let mut _2: &T;

    bb0: {
        _2 = deref_copy ((*_1).0: &T);
        _0 = <T as std::clone::Clone>::clone(copy _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#6}(_1: &{closure@src/main.rs:48:18: 48:43}, _2: &dyn std::ops::Fn() -> T) -> () {
    debug llambda => _2;
    let mut _0: ();
    let _3: T;

    bb0: {
        _3 = <dyn std::ops::Fn() -> T as std::ops::Fn<()>>::call(copy _2, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#7}(_1: &{closure@src/main.rs:51:13: 51:15}) -> T {
    let mut _0: T;
    let _2: T;
    let _3: ();
    let mut _4: T;
    let mut _5: &T;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = T { _value: const 10_i32 };
        _5 = &_2;
        _4 = <T as std::clone::Clone>::clone(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test_own(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = move _2;
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:16 ~ local_tests[65b4]::{impl#0}::clone)"]
    1 [ label="i1: DefId(0:3 ~ local_tests[65b4]::main)"]
    2 [ label="i2: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    3 [ label="i3: DefId(0:12 ~ local_tests[65b4]::test_own)"]
    4 [ label="i4: DefId(0:4 ~ local_tests[65b4]::main::{closure#0})"]
    5 [ label="i5: DefId(0:5 ~ local_tests[65b4]::main::{closure#1})"]
    6 [ label="i6: DefId(0:6 ~ local_tests[65b4]::main::{closure#2})"]
    7 [ label="i7: DefId(0:8 ~ local_tests[65b4]::main::{closure#4})"]
    8 [ label="i8: DefId(0:10 ~ local_tests[65b4]::main::{closure#6})"]
    9 [ label="i9: DefId(0:7 ~ local_tests[65b4]::main::{closure#3})"]
    10 [ label="i10: DefId(0:9 ~ local_tests[65b4]::main::{closure#5})"]
    11 [ label="i11: DefId(2:3675 ~ core[47af]::ops::function::Fn::call)"]
    12 [ label="i12: DefId(0:11 ~ local_tests[65b4]::main::{closure#7})"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 2 [ label="1.00"]
    1 -> 4 [ label="2.00"]
    1 -> 2 [ label="1.00"]
    1 -> 5 [ label="1.00"]
    1 -> 6 [ label="1.00"]
    1 -> 7 [ label="1.00"]
    1 -> 8 [ label="1.00"]
    4 -> 3 [ label="1.00"]
    5 -> 3 [ label="1.00"]
    6 -> 3 [ label="1.00"]
    9 -> 2 [ label="1.00"]
    7 -> 3 [ label="1.00"]
    10 -> 2 [ label="1.00"]
    8 -> 11 [ label="2.00"]
    12 -> 2 [ label="1.00"]
    12 -> 3 [ label="1.00"]
}

