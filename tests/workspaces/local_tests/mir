// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:97:10: 97:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = copy (*_3);
        _0 = T { _value: move _2 };
        return;
    }
}

fn <impl at src/main.rs:102:10: 102:15>::clone(_1: &U) -> U {
    debug self => _1;
    let mut _0: U;
    scope 1 {
    }

    bb0: {
        _0 = copy (*_1);
        return;
    }
}

fn test_const(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_move(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_copy(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_copy_mut(_1: &mut T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_const_ref(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &T;
    let _3: ();
    let _4: T;
    let _5: ();
    let _7: ();
    let mut _8: T;
    let mut _9: &T;
    let _11: ();
    let _12: &T;
    let _14: ();
    let mut _15: &mut T;
    let _17: ();
    scope 1 {
        debug x => _4;
        let _6: T;
        scope 2 {
            debug x => _6;
            let _10: T;
            scope 3 {
                debug x => _10;
                let mut _13: T;
                scope 4 {
                    debug x => _13;
                    let _16: U;
                    scope 5 {
                        debug x => _16;
                        scope 6 {
                            debug copy_x => _16;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const main::xtmp;
        _1 = test_const_ref(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test_const(const main::xc) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = T { _value: const 10_i32 };
        _5 = test_move(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = T { _value: const 10_i32 };
        _9 = &_6;
        _8 = <T as std::clone::Clone>::clone(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = test_move(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = T { _value: const 10_i32 };
        _12 = &_10;
        _11 = test_copy(copy _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _13 = T { _value: const 10_i32 };
        _15 = &mut _13;
        _14 = test_copy_mut(copy _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = U { _value: const 10_i32 };
        _17 = test_for_u(copy _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

const main::xtmp: &T = {
    let mut _0: &T;
    let _1: &T;
    let _2: T;
    let mut _3: &T;

    bb0: {
        StorageLive(_1);
        _3 = const main::xtmp::promoted[0];
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

const main::xtmp::promoted[0]: &T = {
    let mut _0: &T;
    let mut _1: T;

    bb0: {
        _1 = T { _value: const 10_i32 };
        _0 = &_1;
        return;
    }
}

const main::xc: T = {
    let mut _0: T;

    bb0: {
        _0 = T { _value: const 10_i32 };
        return;
    }
}

fn test_for_u(_1: U) -> () {
    debug u => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:15 ~ local_tests[65b4]::{impl#0}::clone)"]
    1 [ label="i1: DefId(0:19 ~ local_tests[65b4]::{impl#1}::clone)"]
    2 [ label="i2: DefId(0:3 ~ local_tests[65b4]::test_const)"]
    3 [ label="i3: DefId(0:4 ~ local_tests[65b4]::test_move)"]
    4 [ label="i4: DefId(0:5 ~ local_tests[65b4]::test_copy)"]
    5 [ label="i5: DefId(0:6 ~ local_tests[65b4]::test_copy_mut)"]
    6 [ label="i6: DefId(0:7 ~ local_tests[65b4]::test_const_ref)"]
    7 [ label="i7: DefId(0:8 ~ local_tests[65b4]::main)"]
    8 [ label="i8: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    9 [ label="i9: DefId(0:11 ~ local_tests[65b4]::test_for_u)"]
    10 [ label="i10: DefId(0:9 ~ local_tests[65b4]::main::xtmp)"]
    11 [ label="i11: DefId(0:10 ~ local_tests[65b4]::main::xc)"]
    7 -> 6 [ label="1.00"]
    7 -> 2 [ label="1.00"]
    7 -> 3 [ label="1.00"]
    7 -> 8 [ label="1.00"]
    7 -> 3 [ label="1.00"]
    7 -> 4 [ label="1.00"]
    7 -> 5 [ label="1.00"]
    7 -> 9 [ label="1.00"]
}

