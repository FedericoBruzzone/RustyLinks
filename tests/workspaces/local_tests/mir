// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:100:10: 100:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = copy (*_3);
        _0 = T { _value: move _2 };
        return;
    }
}

fn <impl at src/main.rs:105:1: 105:7>::test_method(_1: T) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:111:10: 111:15>::clone(_1: &U) -> U {
    debug self => _1;
    let mut _0: U;
    scope 1 {
    }

    bb0: {
        _0 = copy (*_1);
        return;
    }
}

fn <impl at src/main.rs:116:1: 116:7>::test_method(_1: U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_const(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_move(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_copy(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_copy_mut(_1: &mut T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_const_ref(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &T;
    let _3: ();
    let _4: T;
    let _5: ();
    let _7: ();
    let mut _8: T;
    let mut _9: &T;
    let _10: ();
    let _12: ();
    let _13: &T;
    let _15: ();
    let mut _16: &mut T;
    let _18: ();
    let _19: ();
    let _21: ();
    let mut _22: &mut U;
    let _23: ();
    let mut _24: &U;
    let _25: ();
    let mut _26: U;
    let _28: ();
    scope 1 {
        debug x => _4;
        let _6: T;
        scope 2 {
            debug x => _6;
            let _11: T;
            scope 3 {
                debug x => _11;
                let mut _14: T;
                scope 4 {
                    debug x => _14;
                    let _17: U;
                    scope 5 {
                        debug x => _17;
                        scope 6 {
                            debug copy_x => _17;
                            let mut _20: U;
                            scope 7 {
                                debug x => _20;
                                scope 8 {
                                    debug method => U::test_method;
                                    let _27: U;
                                    scope 9 {
                                        debug x => _27;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const main::xtmp;
        _1 = test_const_ref(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test_const(const main::xc) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = T { _value: const 10_i32 };
        _5 = test_move(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = T { _value: const 10_i32 };
        _9 = &_6;
        _8 = <T as std::clone::Clone>::clone(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = test_move(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = T::test_method(move _6) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = T { _value: const 10_i32 };
        _13 = &_11;
        _12 = test_copy(copy _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = T { _value: const 10_i32 };
        _16 = &mut _14;
        _15 = test_copy_mut(copy _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = U { _value: const 10_i32 };
        _18 = test_for_u(copy _17) -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = U::test_method(copy _17) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = U { _value: const 10_i32 };
        _22 = &mut _20;
        _21 = <U as Trait>::test_self_ref_mut(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _24 = &_20;
        _23 = <U as Trait>::test_self_ref(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        _26 = copy _20;
        _25 = <U as Trait>::test_self(move _26) -> [return: bb13, unwind continue];
    }

    bb13: {
        _27 = U { _value: const 10_i32 };
        _28 = U::test_method(copy _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }
}

const main::xtmp: &T = {
    let mut _0: &T;
    let _1: &T;
    let _2: T;
    let mut _3: &T;

    bb0: {
        StorageLive(_1);
        _3 = const main::xtmp::promoted[0];
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

const main::xtmp::promoted[0]: &T = {
    let mut _0: &T;
    let mut _1: T;

    bb0: {
        _1 = T { _value: const 10_i32 };
        _0 = &_1;
        return;
    }
}

const main::xc: T = {
    let mut _0: T;

    bb0: {
        _0 = T { _value: const 10_i32 };
        return;
    }
}

fn test_for_u(_1: U) -> () {
    debug u => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:191:1: 191:17>::test_self_ref_mut(_1: &mut U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:191:1: 191:17>::test_self_ref(_1: &U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at src/main.rs:191:1: 191:17>::test_self(_1: U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:27 ~ local_tests[65b4]::{impl#3}::clone)"]
    1 [ label="i1: DefId(0:4 ~ local_tests[65b4]::{impl#0}::test_method)"]
    2 [ label="i2: DefId(0:31 ~ local_tests[65b4]::{impl#4}::clone)"]
    3 [ label="i3: DefId(0:6 ~ local_tests[65b4]::{impl#1}::test_method)"]
    4 [ label="i4: DefId(0:7 ~ local_tests[65b4]::test_const)"]
    5 [ label="i5: DefId(0:8 ~ local_tests[65b4]::test_move)"]
    6 [ label="i6: DefId(0:9 ~ local_tests[65b4]::test_copy)"]
    7 [ label="i7: DefId(0:10 ~ local_tests[65b4]::test_copy_mut)"]
    8 [ label="i8: DefId(0:11 ~ local_tests[65b4]::test_const_ref)"]
    9 [ label="i9: DefId(0:12 ~ local_tests[65b4]::main)"]
    10 [ label="i10: DefId(0:3 ~ local_tests[65b4]::{impl#0})"]
    11 [ label="i11: DefId(0:15 ~ local_tests[65b4]::test_for_u)"]
    12 [ label="i12: DefId(0:5 ~ local_tests[65b4]::{impl#1})"]
    13 [ label="i13: DefId(0:17 ~ local_tests[65b4]::Trait::test_self_ref_mut)"]
    14 [ label="i14: DefId(0:18 ~ local_tests[65b4]::Trait::test_self_ref)"]
    15 [ label="i15: DefId(0:19 ~ local_tests[65b4]::Trait::test_self)"]
    16 [ label="i16: DefId(0:13 ~ local_tests[65b4]::main::xtmp)"]
    17 [ label="i17: DefId(0:14 ~ local_tests[65b4]::main::xc)"]
    18 [ label="i18: DefId(0:21 ~ local_tests[65b4]::{impl#2}::test_self_ref_mut)"]
    19 [ label="i19: DefId(0:22 ~ local_tests[65b4]::{impl#2}::test_self_ref)"]
    20 [ label="i20: DefId(0:23 ~ local_tests[65b4]::{impl#2}::test_self)"]
    9 -> 8 [ label="1.00"]
    9 -> 4 [ label="1.00"]
    9 -> 5 [ label="1.00"]
    9 -> 5 [ label="1.00"]
    9 -> 10 [ label="1.00"]
    9 -> 6 [ label="1.00"]
    9 -> 7 [ label="1.00"]
    9 -> 11 [ label="1.00"]
    9 -> 12 [ label="1.00"]
    9 -> 13 [ label="1.00"]
    9 -> 14 [ label="1.00"]
    9 -> 15 [ label="1.00"]
    9 -> 12 [ label="1.00"]
}

