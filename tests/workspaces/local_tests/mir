// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:7:10: 7:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = copy (*_3);
        _0 = T { _value: move _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: T;
    let _3: ();
    let mut _4: &{closure@src/main.rs:40:18: 40:56};
    let mut _5: (std::boxed::Box<dyn std::ops::Fn() -> T>,);
    let mut _6: std::boxed::Box<dyn std::ops::Fn() -> T>;
    let mut _7: std::boxed::Box<{closure@src/main.rs:44:33: 44:35}>;
    let mut _8: {closure@src/main.rs:44:33: 44:35};
    let mut _9: &T;
    let _11: ();
    let mut _12: &{closure@src/main.rs:47:18: 47:44};
    let mut _13: (&dyn std::ops::Fn(),);
    let mut _14: &dyn std::ops::Fn();
    let _15: &{closure@src/main.rs:50:13: 50:15};
    let _16: ();
    let mut _17: T;
    let mut _18: &T;
    let mut _19: &dyn std::ops::Fn();
    let _20: &{closure@src/main.rs:55:25: 55:27};
    scope 1 {
        debug x => _1;
        let _2: {closure@src/main.rs:40:18: 40:56};
        scope 2 {
            debug lambda => const ZeroSized: {closure@src/main.rs:40:18: 40:56};
            let _10: {closure@src/main.rs:47:18: 47:44};
            scope 3 {
                debug lambda => const ZeroSized: {closure@src/main.rs:47:18: 47:44};
            }
        }
    }

    bb0: {
        _1 = T { _value: const 10_i32 };
        _4 = &_2;
        _9 = &_1;
        _8 = {closure@src/main.rs:44:33: 44:35} { x: move _9 };
        _7 = std::boxed::Box::<{closure@src/main.rs:44:33: 44:35}>::new(move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = move _7 as std::boxed::Box<dyn std::ops::Fn() -> T> (PointerCoercion(Unsize, Implicit));
        _5 = (move _6,);
        _3 = <{closure@src/main.rs:40:18: 40:56} as std::ops::Fn<(std::boxed::Box<dyn std::ops::Fn() -> T>,)>>::call(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = &_10;
        _15 = const main::promoted[1];
        _14 = copy _15 as &dyn std::ops::Fn() (PointerCoercion(Unsize, Implicit));
        _13 = (move _14,);
        _11 = <{closure@src/main.rs:47:18: 47:44} as std::ops::Fn<(&dyn std::ops::Fn(),)>>::call(move _12, move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _18 = &_1;
        _17 = <T as std::clone::Clone>::clone(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = const main::promoted[0];
        _19 = copy _20 as &dyn std::ops::Fn() (PointerCoercion(Unsize, Implicit));
        _16 = test_fn(move _17, move _19) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

const main::promoted[0]: &{closure@src/main.rs:55:25: 55:27} = {
    let mut _0: &{closure@src/main.rs:55:25: 55:27};
    let mut _1: {closure@src/main.rs:55:25: 55:27};

    bb0: {
        _1 = {closure@src/main.rs:55:25: 55:27};
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &{closure@src/main.rs:50:13: 50:15} = {
    let mut _0: &{closure@src/main.rs:50:13: 50:15};
    let mut _1: {closure@src/main.rs:50:13: 50:15};

    bb0: {
        _1 = {closure@src/main.rs:50:13: 50:15};
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &{closure@src/main.rs:40:18: 40:56}, _2: std::boxed::Box<dyn std::ops::Fn() -> T>) -> () {
    debug bbox => _2;
    let mut _0: ();
    let _3: T;
    let _4: ();
    scope 1 {
        debug x => _3;
    }

    bb0: {
        _3 = T { _value: const 10_i32 };
        _4 = test_own(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate(cleanup)];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main::{closure#1}(_1: &{closure@src/main.rs:44:33: 44:35}) -> T {
    debug x => (*((*_1).0: &T));
    let mut _0: T;
    let mut _2: &T;

    bb0: {
        _2 = deref_copy ((*_1).0: &T);
        _0 = <T as std::clone::Clone>::clone(copy _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#2}(_1: &{closure@src/main.rs:47:18: 47:44}, _2: &dyn std::ops::Fn()) -> () {
    debug llambda => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = <dyn std::ops::Fn() as std::ops::Fn<()>>::call(copy _2, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#3}(_1: &{closure@src/main.rs:50:13: 50:15}) -> () {
    let mut _0: ();
    let _2: T;
    let _3: ();
    let mut _4: T;
    let mut _5: &T;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = T { _value: const 10_i32 };
        _5 = &_2;
        _4 = <T as std::clone::Clone>::clone(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test_own(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main::{closure#4}(_1: &{closure@src/main.rs:55:25: 55:27}) -> () {
    let mut _0: ();
    let _2: T;
    let _3: ();
    let mut _4: T;
    let mut _5: &T;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = T { _value: const 10_i32 };
        _5 = &_2;
        _4 = <T as std::clone::Clone>::clone(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test_own(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn test_fn(_1: T, _2: &dyn std::ops::Fn()) -> () {
    debug t => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = <dyn std::ops::Fn() as std::ops::Fn<()>>::call(copy _2, const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:14 ~ local_tests[65b4]::{impl#0}::clone)"]
    1 [ label="i1: DefId(0:3 ~ local_tests[65b4]::main)"]
    2 [ label="i2: DefId(0:4 ~ local_tests[65b4]::main::{closure#0})"]
    3 [ label="i3: DefId(0:6 ~ local_tests[65b4]::main::{closure#2})"]
    4 [ label="i4: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    5 [ label="i5: DefId(0:9 ~ local_tests[65b4]::test_fn)"]
    6 [ label="i6: DefId(0:10 ~ local_tests[65b4]::test_own)"]
    7 [ label="i7: DefId(0:5 ~ local_tests[65b4]::main::{closure#1})"]
    8 [ label="i8: DefId(2:3675 ~ core[47af]::ops::function::Fn::call)"]
    9 [ label="i9: DefId(0:7 ~ local_tests[65b4]::main::{closure#3})"]
    10 [ label="i10: DefId(0:8 ~ local_tests[65b4]::main::{closure#4})"]
    1 -> 2 [ label="1.00"]
    1 -> 3 [ label="1.00"]
    1 -> 4 [ label="1.00"]
    1 -> 5 [ label="2.00"]
    2 -> 6 [ label="1.00"]
    7 -> 4 [ label="1.00"]
    3 -> 8 [ label="2.00"]
    9 -> 4 [ label="1.00"]
    9 -> 6 [ label="1.00"]
    10 -> 4 [ label="1.00"]
    10 -> 6 [ label="1.00"]
    5 -> 8 [ label="2.00"]
}

