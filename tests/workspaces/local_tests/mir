// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:97:10: 97:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let _3: &i32;

    bb0: {
        _3 = &((*_1).0: i32);
        _2 = copy (*_3);
        _0 = T { _value: move _2 };
        return;
    }
}

fn test_const(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_move(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_copy(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_copy_mut(_1: &mut T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_const_ref(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn ok() -> i32 {
    let mut _0: i32;

    bb0: {
        _0 = const 10_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &T;
    let _3: ();
    let _4: T;
    let _5: ();
    let _7: ();
    let mut _8: T;
    let mut _9: &T;
    let _11: ();
    let _12: &T;
    let _14: ();
    let mut _15: &mut T;
    let mut _18: std::ops::Range<i32>;
    let mut _19: std::ops::Range<i32>;
    let mut _21: std::option::Option<i32>;
    let mut _22: &mut std::ops::Range<i32>;
    let mut _23: isize;
    scope 1 {
        debug x => _4;
        let _6: T;
        scope 2 {
            debug x => _6;
            let _10: T;
            scope 3 {
                debug x => _10;
                let mut _13: T;
                scope 4 {
                    debug x => _13;
                    let _16: i32;
                    scope 5 {
                        debug r => _16;
                        let _17: i32;
                        scope 6 {
                            debug x => _17;
                            let mut _20: std::ops::Range<i32>;
                            scope 7 {
                                debug iter => _20;
                                let _24: i32;
                                scope 8 {
                                    debug i => _24;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const main::xtmp;
        _1 = test_const_ref(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = test_const(const main::xc) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = T { _value: const 10_i32 };
        _5 = test_move(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = T { _value: const 10_i32 };
        _9 = &_6;
        _8 = <T as std::clone::Clone>::clone(move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = test_move(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = T { _value: const 10_i32 };
        _12 = &_10;
        _11 = test_copy(copy _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _13 = T { _value: const 10_i32 };
        _15 = &mut _13;
        _14 = test_copy_mut(copy _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = rand::random::<i32>() -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = ok() -> [return: bb9, unwind continue];
    }

    bb9: {
        _19 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 };
        _18 = <std::ops::Range<i32> as std::iter::IntoIterator>::into_iter(move _19) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = move _18;
        goto -> bb11;
    }

    bb11: {
        _22 = &mut _20;
        _21 = <std::ops::Range<i32> as std::iter::Iterator>::next(copy _22) -> [return: bb12, unwind continue];
    }

    bb12: {
        _23 = discriminant(_21);
        switchInt(move _23) -> [0: bb15, 1: bb14, otherwise: bb13];
    }

    bb13: {
        unreachable;
    }

    bb14: {
        _24 = copy ((_21 as Some).0: i32);
        goto -> bb11;
    }

    bb15: {
        return;
    }
}

const main::xtmp: &T = {
    let mut _0: &T;
    let _1: &T;
    let _2: T;
    let mut _3: &T;

    bb0: {
        StorageLive(_1);
        _3 = const main::xtmp::promoted[0];
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

const main::xtmp::promoted[0]: &T = {
    let mut _0: &T;
    let mut _1: T;

    bb0: {
        _1 = T { _value: const 10_i32 };
        _0 = &_1;
        return;
    }
}

const main::xc: T = {
    let mut _0: T;

    bb0: {
        _0 = T { _value: const 10_i32 };
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:16 ~ local_tests[fb88]::{impl#0}::clone)"]
    1 [ label="i1: DefId(0:3 ~ local_tests[fb88]::test_const)"]
    2 [ label="i2: DefId(0:4 ~ local_tests[fb88]::test_move)"]
    3 [ label="i3: DefId(0:5 ~ local_tests[fb88]::test_copy)"]
    4 [ label="i4: DefId(0:6 ~ local_tests[fb88]::test_copy_mut)"]
    5 [ label="i5: DefId(0:7 ~ local_tests[fb88]::test_const_ref)"]
    6 [ label="i6: DefId(0:8 ~ local_tests[fb88]::ok)"]
    7 [ label="i7: DefId(0:9 ~ local_tests[fb88]::main)"]
    8 [ label="i8: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    9 [ label="i9: DefId(20:796 ~ rand[7b48]::random)"]
    10 [ label="i10: DefId(2:8567 ~ core[47af]::iter::traits::collect::IntoIterator::into_iter)"]
    11 [ label="i11: DefId(2:8748 ~ core[47af]::iter::traits::iterator::Iterator::next)"]
    12 [ label="i12: DefId(0:10 ~ local_tests[fb88]::main::xtmp)"]
    13 [ label="i13: DefId(0:11 ~ local_tests[fb88]::main::xc)"]
    7 -> 5 [ label="1.00"]
    7 -> 1 [ label="1.00"]
    7 -> 2 [ label="1.00"]
    7 -> 8 [ label="1.00"]
    7 -> 2 [ label="1.00"]
    7 -> 3 [ label="1.00"]
    7 -> 4 [ label="1.00"]
    7 -> 9 [ label="-0.00"]
    7 -> 6 [ label="-0.00"]
    7 -> 10 [ label="1.00"]
    7 -> 11 [ label="1.00"]
}

