// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:7:10: 7:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let mut _3: &i32;
    let _4: &i32;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: i32);
        _3 = &(*_4);
        _2 = <i32 as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _0 = T { _value: move _2 };
        StorageDead(_2);
        StorageDead(_4);
        return;
    }
}

fn test(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: fn(T);
    let mut _2: fn(T);
    let _3: ();
    let mut _4: fn(T);
    let mut _5: T;
    let _6: ();
    let mut _7: fn(T);
    let mut _8: T;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_1);
        _1 = test_own as fn(T) (PointerCoercion(ReifyFnPointer, AsCast));
        StorageLive(_2);
        _2 = test as fn(T) (PointerCoercion(ReifyFnPointer, AsCast));
        _1 = move _2;
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = copy _1;
        StorageLive(_5);
        _5 = T { _value: const 10_i32 };
        _3 = move _4(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_6);
        StorageLive(_7);
        _7 = copy _1;
        StorageLive(_8);
        _8 = T { _value: const 10_i32 };
        _6 = move _7(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_8);
        StorageDead(_7);
        StorageDead(_6);
        _0 = const ();
        StorageDead(_1);
        return;
    }
}

fn test_fn(_1: &dyn std::ops::Fn()) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &dyn std::ops::Fn();
    let mut _4: ();

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        StorageLive(_4);
        _4 = ();
        _2 = <dyn std::ops::Fn() as std::ops::Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        _0 = const ();
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:10 ~ local_tests[65b4]::{impl#0}::clone)"]
    1 [ label="i1: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    2 [ label="i2: DefId(0:3 ~ local_tests[65b4]::test)"]
    3 [ label="i3: DefId(0:4 ~ local_tests[65b4]::main)"]
    4 [ label="i4: DefId(0:5 ~ local_tests[65b4]::test_fn)"]
    5 [ label="i5: DefId(2:3675 ~ core[47af]::ops::function::Fn::call)"]
    6 [ label="i6: DefId(0:6 ~ local_tests[65b4]::test_own)"]
    0 -> 1 [ label="1.00"]
    3 -> 2 [ label="1.00"]
    3 -> 2 [ label="1.00"]
    4 -> 5 [ label="2.00"]
}

