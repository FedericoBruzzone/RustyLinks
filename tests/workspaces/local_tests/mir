// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:100:10: 100:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let mut _3: &i32;
    let _4: &i32;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: i32);
        _3 = &(*_4);
        _2 = <i32 as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _0 = T { _value: move _2 };
        StorageDead(_2);
        StorageDead(_4);
        return;
    }
}

fn <impl at src/main.rs:105:1: 105:7>::test_method(_1: T) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn <impl at src/main.rs:111:10: 111:15>::clone(_1: &U) -> U {
    debug self => _1;
    let mut _0: U;
    scope 1 {
    }

    bb0: {
        _0 = copy (*_1);
        return;
    }
}

fn <impl at src/main.rs:116:1: 116:7>::test_method(_1: U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_const(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_move(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_copy(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_copy_mut(_1: &mut T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_const_ref(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn(U) {U::test_method};
    let _3: ();
    let mut _4: fn(U) {U::test_method};
    let mut _5: U;
    scope 1 {
        debug method => _1;
        let _2: U;
        scope 2 {
            debug x => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = U::test_method;
        StorageLive(_2);
        _2 = U { _value: const 10_i32 };
        StorageLive(_3);
        StorageLive(_4);
        _4 = copy _1;
        StorageLive(_5);
        _5 = copy _2;
        _3 = move _4(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn test_for_u(_1: U) -> () {
    debug u => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn <impl at src/main.rs:191:1: 191:17>::test_self_ref_mut(_1: &mut U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn <impl at src/main.rs:191:1: 191:17>::test_self_ref(_1: &U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn <impl at src/main.rs:191:1: 191:17>::test_self(_1: U) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:25 ~ local_tests[65b4]::{impl#3}::clone)"]
    1 [ label="i1: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    2 [ label="i2: DefId(0:4 ~ local_tests[65b4]::{impl#0}::test_method)"]
    3 [ label="i3: DefId(0:29 ~ local_tests[65b4]::{impl#4}::clone)"]
    4 [ label="i4: DefId(0:6 ~ local_tests[65b4]::{impl#1}::test_method)"]
    5 [ label="i5: DefId(0:7 ~ local_tests[65b4]::test_const)"]
    6 [ label="i6: DefId(0:8 ~ local_tests[65b4]::test_move)"]
    7 [ label="i7: DefId(0:9 ~ local_tests[65b4]::test_copy)"]
    8 [ label="i8: DefId(0:10 ~ local_tests[65b4]::test_copy_mut)"]
    9 [ label="i9: DefId(0:11 ~ local_tests[65b4]::test_const_ref)"]
    10 [ label="i10: DefId(0:12 ~ local_tests[65b4]::main)"]
    11 [ label="i11: DefId(0:5 ~ local_tests[65b4]::{impl#1})"]
    12 [ label="i12: DefId(0:13 ~ local_tests[65b4]::test_for_u)"]
    13 [ label="i13: DefId(0:19 ~ local_tests[65b4]::{impl#2}::test_self_ref_mut)"]
    14 [ label="i14: DefId(0:20 ~ local_tests[65b4]::{impl#2}::test_self_ref)"]
    15 [ label="i15: DefId(0:21 ~ local_tests[65b4]::{impl#2}::test_self)"]
    0 -> 1 [ label="1.00"]
    10 -> 11 [ label="1.00"]
}

