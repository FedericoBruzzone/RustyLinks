// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static HELLO: [char; 5] = {
    let mut _0: [char; 5];

    bb0: {
        _0 = [const 'H', const 'e', const 'l', const 'l', const 'o'];
        return;
    }
}

HELLO::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

const HELLO_C: [char; 5] = {
    let mut _0: [char; 5];

    bb0: {
        _0 = [const 'H', const 'e', const 'l', const 'l', const 'o'];
        return;
    }
}

HELLO_C::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

static mut TEST_LAMBDA_MUT: fn() = {
    let mut _0: fn();
    let mut _1: {closure@src/main.rs:211:36: 211:38};

    bb0: {
        StorageLive(_1);
        _1 = {closure@src/main.rs:211:36: 211:38};
        _0 = move _1 as fn() (PointerCoercion(ClosureFnPointer(Safe), Implicit));
        StorageDead(_1);
        return;
    }
}

fn TEST_LAMBDA_MUT::{closure#0}(_1: &{closure@src/main.rs:211:36: 211:38}) -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

static TEST_LAMBDA: fn() = {
    let mut _0: fn();
    let mut _1: {closure@src/main.rs:214:28: 214:30};

    bb0: {
        StorageLive(_1);
        _1 = {closure@src/main.rs:214:28: 214:30};
        _0 = move _1 as fn() (PointerCoercion(ClosureFnPointer(Safe), Implicit));
        StorageDead(_1);
        return;
    }
}

fn TEST_LAMBDA::{closure#0}(_1: &{closure@src/main.rs:214:28: 214:30}) -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const TEST_LAMBDA_C: fn() = {
    let mut _0: fn();
    let mut _1: {closure@src/main.rs:217:29: 217:31};

    bb0: {
        StorageLive(_1);
        _1 = {closure@src/main.rs:217:29: 217:31};
        _0 = move _1 as fn() (PointerCoercion(ClosureFnPointer(Safe), Implicit));
        StorageDead(_1);
        return;
    }
}

fn TEST_LAMBDA_C::{closure#0}(_1: &{closure@src/main.rs:217:29: 217:31}) -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_static() -> bool {
    let mut _0: bool;
    let mut _1: bool;
    let mut _2: &[char; 5];
    let mut _3: &[char; 5];
    let mut _4: &[char; 5];
    let mut _5: &[char; 5];

    bb0: {
        _2 = const {alloc1: &[char; 5]};
        _3 = const test_static::promoted[1];
        _1 = <[char; 5] as std::cmp::PartialEq>::eq(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = const {alloc1: &[char; 5]};
        _5 = const test_static::promoted[0];
        _0 = <[char; 5] as std::cmp::PartialEq>::eq(move _4, move _5) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

alloc1 (static: HELLO, size: 20, align: 4) {
    0x00 │ 48 00 00 00 65 00 00 00 6c 00 00 00 6c 00 00 00 │ H...e...l...l...
    0x10 │ 6f 00 00 00                                     │ o...
}

const test_static::promoted[0]: &[char; 5] = {
    let mut _0: &[char; 5];
    let mut _1: [char; 5];

    bb0: {
        _1 = const HELLO_C;
        _0 = &_1;
        return;
    }
}

const test_static::promoted[1]: &[char; 5] = {
    let mut _0: &[char; 5];
    let mut _1: [char; 5];

    bb0: {
        _1 = [const 'H', const 'e', const 'l', const 'l', const 'o'];
        _0 = &_1;
        return;
    }
}

fn test_static2() -> bool {
    let mut _0: bool;
    let mut _1: &[char; 5];
    let mut _2: &[char; 5];

    bb0: {
        _1 = const {alloc1: &[char; 5]};
        _2 = const test_static2::promoted[0];
        _0 = <[char; 5] as std::cmp::PartialEq>::eq(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: HELLO, size: 20, align: 4) {
    0x00 │ 48 00 00 00 65 00 00 00 6c 00 00 00 6c 00 00 00 │ H...e...l...l...
    0x10 │ 6f 00 00 00                                     │ o...
}

const test_static2::promoted[0]: &[char; 5] = {
    let mut _0: &[char; 5];
    let mut _1: [char; 5];

    bb0: {
        _1 = const HELLO_C;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: i32;
    let _3: bool;
    let mut _4: fn() -> bool;
    scope 1 {
        debug x => const 10_i32;
        let _1: fn() -> bool;
        scope 2 {
            debug f_call => _1;
        }
    }

    bb0: {
        _2 = const 10_i32;
        switchInt(move _2) -> [10: bb1, otherwise: bb2];
    }

    bb1: {
        _1 = test_static as fn() -> bool (PointerCoercion(ReifyFnPointer, Implicit));
        goto -> bb3;
    }

    bb2: {
        _1 = test_static2 as fn() -> bool (PointerCoercion(ReifyFnPointer, Implicit));
        goto -> bb3;
    }

    bb3: {
        _4 = copy _1;
        _3 = move _4() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
