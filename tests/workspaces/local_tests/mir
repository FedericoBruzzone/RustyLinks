// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at src/main.rs:7:10: 7:15>::clone(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: i32;
    let mut _3: &i32;
    let _4: &i32;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        StorageLive(_4);
        _4 = &((*_1).0: i32);
        _3 = &(*_4);
        _2 = <i32 as std::clone::Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        _0 = T { _value: move _2 };
        StorageDead(_2);
        StorageDead(_4);
        return;
    }
}

fn test(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_fn(_1: &dyn std::ops::Fn()) -> () {
    debug t => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &dyn std::ops::Fn();
    let mut _4: ();

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &(*_1);
        StorageLive(_4);
        _4 = ();
        _2 = <dyn std::ops::Fn() as std::ops::Fn<()>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_3);
        StorageDead(_2);
        _0 = const ();
        return;
    }
}

fn test_own(_1: T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_borrow(_1: &T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn test_mut_borrow(_1: &mut T) -> () {
    debug t => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        _0 = const ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: {closure@src/main.rs:33:13: 33:15};
    let _3: ();
    let mut _4: &{closure@src/main.rs:33:13: 33:15};
    let mut _5: ();
    scope 1 {
        debug x => _1;
        let _2: {closure@src/main.rs:33:13: 33:15};
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = {closure@src/main.rs:33:13: 33:15};
        StorageLive(_2);
        _2 = copy _1;
        StorageLive(_3);
        StorageLive(_4);
        _4 = &_2;
        StorageLive(_5);
        _5 = ();
        _3 = <{closure@src/main.rs:33:13: 33:15} as std::ops::Fn<()>>::call(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        _0 = const ();
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

fn main::{closure#0}(_1: &{closure@src/main.rs:33:13: 33:15}) -> () {
    let mut _0: ();
    let _2: T;
    let _3: ();
    let mut _4: T;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        StorageLive(_2);
        _2 = T { _value: const 10_i32 };
        StorageLive(_3);
        StorageLive(_4);
        _4 = move _2;
        _3 = test_own(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_4);
        StorageDead(_3);
        _0 = const ();
        StorageDead(_2);
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:13 ~ local_tests[65b4]::{impl#0}::clone)"]
    1 [ label="i1: DefId(2:2922 ~ core[47af]::clone::Clone::clone)"]
    2 [ label="i2: DefId(0:3 ~ local_tests[65b4]::test)"]
    3 [ label="i3: DefId(0:4 ~ local_tests[65b4]::test_fn)"]
    4 [ label="i4: DefId(2:3675 ~ core[47af]::ops::function::Fn::call)"]
    5 [ label="i5: DefId(0:5 ~ local_tests[65b4]::test_own)"]
    6 [ label="i6: DefId(0:6 ~ local_tests[65b4]::test_borrow)"]
    7 [ label="i7: DefId(0:7 ~ local_tests[65b4]::test_mut_borrow)"]
    8 [ label="i8: DefId(0:8 ~ local_tests[65b4]::main)"]
    9 [ label="i9: DefId(0:9 ~ local_tests[65b4]::main::{closure#0})"]
    0 -> 1 [ label="1.00"]
    3 -> 4 [ label="2.00"]
    8 -> 9 [ label="-0.00"]
    9 -> 5 [ label="1.00"]
}

