// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static HELLO: [char; 5] = {
    let mut _0: [char; 5];

    bb0: {
        _0 = [const 'H', const 'e', const 'l', const 'l', const 'o'];
        return;
    }
}

HELLO::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

const HELLO_C: [char; 5] = {
    let mut _0: [char; 5];

    bb0: {
        _0 = [const 'H', const 'e', const 'l', const 'l', const 'o'];
        return;
    }
}

HELLO_C::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 5_usize;
        return;
    }
}

static mut TEST_LAMBDA_MUT: fn() = {
    let mut _0: fn();
    let mut _1: {closure@src/main.rs:213:36: 213:38};

    bb0: {
        StorageLive(_1);
        _1 = {closure@src/main.rs:213:36: 213:38};
        _0 = move _1 as fn() (PointerCoercion(ClosureFnPointer(Safe), Implicit));
        StorageDead(_1);
        return;
    }
}

fn TEST_LAMBDA_MUT::{closure#0}(_1: &{closure@src/main.rs:213:36: 213:38}) -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

static TEST_LAMBDA: fn() = {
    let mut _0: fn();
    let mut _1: {closure@src/main.rs:216:28: 216:30};

    bb0: {
        StorageLive(_1);
        _1 = {closure@src/main.rs:216:28: 216:30};
        _0 = move _1 as fn() (PointerCoercion(ClosureFnPointer(Safe), Implicit));
        StorageDead(_1);
        return;
    }
}

fn TEST_LAMBDA::{closure#0}(_1: &{closure@src/main.rs:216:28: 216:30}) -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

const TEST_LAMBDA_C: fn() = {
    let mut _0: fn();
    let mut _1: {closure@src/main.rs:219:29: 219:31};

    bb0: {
        StorageLive(_1);
        _1 = {closure@src/main.rs:219:29: 219:31};
        _0 = move _1 as fn() (PointerCoercion(ClosureFnPointer(Safe), Implicit));
        StorageDead(_1);
        return;
    }
}

fn TEST_LAMBDA_C::{closure#0}(_1: &{closure@src/main.rs:219:29: 219:31}) -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn test_static() -> bool {
    let mut _0: bool;
    let mut _1: bool;
    let mut _2: &[char; 5];
    let mut _3: &[char; 5];
    let mut _4: &[char; 5];
    let mut _5: &[char; 5];

    bb0: {
        _2 = const {alloc1: &[char; 5]};
        _3 = const test_static::promoted[1];
        _1 = <[char; 5] as std::cmp::PartialEq>::eq(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = const {alloc1: &[char; 5]};
        _5 = const test_static::promoted[0];
        _0 = <[char; 5] as std::cmp::PartialEq>::eq(move _4, move _5) -> [return: bb4, unwind continue];
    }

    bb3: {
        _0 = const false;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

alloc1 (static: HELLO, size: 20, align: 4) {
    0x00 │ 48 00 00 00 65 00 00 00 6c 00 00 00 6c 00 00 00 │ H...e...l...l...
    0x10 │ 6f 00 00 00                                     │ o...
}

const test_static::promoted[0]: &[char; 5] = {
    let mut _0: &[char; 5];
    let mut _1: [char; 5];

    bb0: {
        _1 = const HELLO_C;
        _0 = &_1;
        return;
    }
}

const test_static::promoted[1]: &[char; 5] = {
    let mut _0: &[char; 5];
    let mut _1: [char; 5];

    bb0: {
        _1 = [const 'H', const 'e', const 'l', const 'l', const 'o'];
        _0 = &_1;
        return;
    }
}

fn test_static2() -> bool {
    let mut _0: bool;
    let mut _1: &[char; 5];
    let mut _2: &[char; 5];

    bb0: {
        _1 = const {alloc1: &[char; 5]};
        _2 = const test_static2::promoted[0];
        _0 = <[char; 5] as std::cmp::PartialEq>::eq(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: HELLO, size: 20, align: 4) {
    0x00 │ 48 00 00 00 65 00 00 00 6c 00 00 00 6c 00 00 00 │ H...e...l...l...
    0x10 │ 6f 00 00 00                                     │ o...
}

const test_static2::promoted[0]: &[char; 5] = {
    let mut _0: &[char; 5];
    let mut _1: [char; 5];

    bb0: {
        _1 = const HELLO_C;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let _5: &[&str; 1];
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let _8: &[&str; 1];
    let _9: ();
    let mut _10: std::fmt::Arguments<'_>;
    let _11: &[&str; 1];

    bb0: {
        _1 = test_static() -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _1) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        _2 = test_static2() -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _2) -> [0: bb6, otherwise: bb4];
    }

    bb4: {
        _5 = const main::promoted[0];
        _4 = std::fmt::Arguments::<'_>::new_const::<1>(copy _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _3 = std::io::_print(move _4) -> [return: bb10, unwind continue];
    }

    bb6: {
        _8 = const main::promoted[1];
        _7 = std::fmt::Arguments::<'_>::new_const::<1>(copy _8) -> [return: bb7, unwind continue];
    }

    bb7: {
        _6 = std::io::_print(move _7) -> [return: bb10, unwind continue];
    }

    bb8: {
        _11 = const main::promoted[2];
        _10 = std::fmt::Arguments::<'_>::new_const::<1>(copy _11) -> [return: bb9, unwind continue];
    }

    bb9: {
        _9 = std::io::_print(move _10) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }
}

const main::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Test passed\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Test failed\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[2]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Test failed\n"];
        _0 = &_1;
        return;
    }
}
digraph {
    0 [ label="i0: DefId(0:3 ~ local_tests[65b4]::HELLO)"]
    1 [ label="i1: DefId(0:4 ~ local_tests[65b4]::HELLO::{constant#0})"]
    2 [ label="i2: DefId(0:5 ~ local_tests[65b4]::HELLO_C)"]
    3 [ label="i3: DefId(0:6 ~ local_tests[65b4]::HELLO_C::{constant#0})"]
    4 [ label="i4: DefId(0:7 ~ local_tests[65b4]::TEST_LAMBDA_MUT)"]
    5 [ label="i5: DefId(0:8 ~ local_tests[65b4]::TEST_LAMBDA_MUT::{closure#0})"]
    6 [ label="i6: DefId(0:9 ~ local_tests[65b4]::TEST_LAMBDA)"]
    7 [ label="i7: DefId(0:10 ~ local_tests[65b4]::TEST_LAMBDA::{closure#0})"]
    8 [ label="i8: DefId(0:11 ~ local_tests[65b4]::TEST_LAMBDA_C)"]
    9 [ label="i9: DefId(0:12 ~ local_tests[65b4]::TEST_LAMBDA_C::{closure#0})"]
    10 [ label="i10: DefId(0:13 ~ local_tests[65b4]::test_static)"]
    11 [ label="i11: DefId(2:2969 ~ core[47af]::cmp::PartialEq::eq)"]
    12 [ label="i12: DefId(0:14 ~ local_tests[65b4]::test_static2)"]
    13 [ label="i13: DefId(0:15 ~ local_tests[65b4]::main)"]
    14 [ label="i14: DefId(2:10973 ~ core[47af]::fmt::{impl#2})"]
    15 [ label="i15: DefId(1:3734 ~ std[d5e6]::io::stdio::_print)"]
    10 -> 11 [ label="2.00"]
    10 -> 11 [ label="2.00"]
    12 -> 11 [ label="2.00"]
    13 -> 10 [ label="-0.00"]
    13 -> 12 [ label="-0.00"]
    13 -> 14 [ label="1.00"]
    13 -> 15 [ label="1.00"]
    13 -> 14 [ label="1.00"]
    13 -> 15 [ label="1.00"]
    13 -> 14 [ label="1.00"]
    13 -> 15 [ label="1.00"]
}

