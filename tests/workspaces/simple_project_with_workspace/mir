// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> () {
    let mut _0: ();

    bb0: {
        _0 = const ();
        return;
    }
}

fn sub(_1: u64, _2: u64) -> u64 {
    debug left => _1;
    debug right => _2;
    let mut _0: u64;
    let mut _3: u64;
    let mut _4: u64;
    let mut _5: (u64, bool);

    bb0: {
        StorageLive(_3);
        _3 = copy _1;
        StorageLive(_4);
        _4 = copy _2;
        _5 = SubWithOverflow(copy _3, copy _4);
        assert(!move (_5.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_5.0: u64);
        StorageDead(_4);
        StorageDead(_3);
        return;
    }
}
fn add(_1: u64, _2: u64) -> u64 {
    debug left => _1;
    debug right => _2;
    let mut _0: u64;
    let _3: ();
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: (u64, bool);

    bb0: {
        StorageLive(_3);
        _3 = test() -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_3);
        StorageLive(_4);
        _4 = copy _1;
        StorageLive(_5);
        _5 = copy _2;
        _6 = AddWithOverflow(copy _4, copy _5);
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> [success: bb2, unwind continue];
    }

    bb2: {
        _0 = move (_6.0: u64);
        StorageDead(_5);
        StorageDead(_4);
        return;
    }
}
def_id: DefId(0:3 ~ crate_a[132e]::test)
def_id_str: "DefId(0:3 ~ crate_a[132e]::test)"
def_id: DefId(0:3 ~ crate_b[d3ba]::sub)
def_id_str: "DefId(0:3 ~ crate_b[d3ba]::sub)"
def_id: DefId(0:4 ~ crate_a[132e]::add)
def_id_str: "DefId(0:4 ~ crate_a[132e]::add)"
digraph {
    0 [ label="i0: DefId(0:3 ~ crate_b[d3ba]::sub)"]
}

digraph {
    0 [ label="i0: DefId(0:3 ~ crate_a[132e]::test)"]
    1 [ label="i1: DefId(0:4 ~ crate_a[132e]::add)"]
    1 -> 0 [ label="-0.00"]
}

// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: u64;
    let mut _2: u64;
    let _3: ();
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str; 1];
    let _7: &[&str; 1];
    let _8: [&str; 1];
    scope 1 {
        scope 2 {
            let mut _9: &[&str; 1];
        }
    }

    bb0: {
        StorageLive(_1);
        _1 = crate_a::add(const 1_u64, const 1_u64) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        StorageLive(_2);
        _2 = crate_b::sub(const 1_u64, const 1_u64) -> [return: bb2, unwind continue];
    }

    bb2: {
        StorageDead(_2);
        StorageLive(_3);
        StorageLive(_4);
        StorageLive(_5);
        StorageLive(_6);
        StorageLive(_7);
        _9 = const main::promoted[0];
        _7 = &(*_9);
        _6 = &(*_7);
        _5 = std::fmt::Arguments::<'_>::new_const::<1>(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        StorageDead(_6);
        _4 = std::io::_print(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        StorageDead(_5);
        StorageDead(_7);
        StorageDead(_4);
        _3 = const ();
        StorageDead(_3);
        _0 = const ();
        return;
    }
}

const main::promoted[0]: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Hello, world!\n"];
        _0 = &_1;
        return;
    }
}
def_id: DefId(0:5 ~ simple_project_with_workspace[de1e]::main)
def_id_str: "DefId(0:5 ~ simple_project_with_workspace[de1e]::main)"
def_id: DefId(20:4 ~ crate_a[132e]::add)
def_id_str: "DefId(20:4 ~ crate_a[132e]::add)"
def_id: DefId(21:3 ~ crate_b[d3ba]::sub)
def_id_str: "DefId(21:3 ~ crate_b[d3ba]::sub)"
def_id: DefId(2:11025 ~ core[fc4c]::fmt::{impl#2}::new_const)
def_id_str: "DefId(2:11025 ~ core[fc4c]::fmt::{impl#2}::new_const)"
def_id: DefId(1:3679 ~ std[3944]::io::stdio::_print)
def_id_str: "DefId(1:3679 ~ std[3944]::io::stdio::_print)"
digraph {
    0 [ label="i0: DefId(0:5 ~ simple_project_with_workspace[de1e]::main)"]
    1 [ label="i1: DefId(20:4 ~ crate_a[132e]::add)"]
    2 [ label="i2: DefId(21:3 ~ crate_b[d3ba]::sub)"]
    3 [ label="i3: DefId(2:11025 ~ core[fc4c]::fmt::{impl#2}::new_const)"]
    4 [ label="i4: DefId(1:3679 ~ std[3944]::io::stdio::_print)"]
    0 -> 1 [ label="2.00"]
    0 -> 2 [ label="2.00"]
    0 -> 3 [ label="1.00"]
    0 -> 4 [ label="1.00"]
}

digraph {
    0 [ label="i0: DefId { krate: crate0, index: DefIndex(3) }"]
    1 [ label="i1: DefId { krate: crate0, index: DefIndex(4) }"]
    2 [ label="i2: DefId { krate: crate0, index: DefIndex(5) }"]
    3 [ label="i3: DefId { krate: crate20, index: DefIndex(4) }"]
    4 [ label="i4: DefId { krate: crate21, index: DefIndex(3) }"]
    5 [ label="i5: DefId { krate: crate2, index: DefIndex(11025) }"]
    6 [ label="i6: DefId { krate: crate1, index: DefIndex(3679) }"]
    1 -> 0 [ label="-0.00"]
    0 -> 1 [ label="2.00"]
    0 -> 2 [ label="2.00"]
    0 -> 3 [ label="1.00"]
    0 -> 4 [ label="1.00"]
}

